buildscript {
  repositories {
    gradlePluginPortal()
    mavenCentral()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:1.7.1"
    if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id "application"
}

apply plugin: 'io.github.fourlastor.construo'

import io.github.fourlastor.construo.Target

// Налаштування джерел і ресурсів
sourceSets {
  main {
    resources {
      srcDirs += [ rootProject.file('assets').path ]
    }
  }
}

mainClassName = 'com.mygdx.darkknight.lwjgl3.Lwjgl3Launcher'
application.mainClass = mainClassName
eclipse.project.name = appName + '-lwjgl3'
java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

// Налаштування компіляції для Java 9+
if (JavaVersion.current().isJava9Compatible()) {
  compileJava.options.release.set(21)
}

repositories {
  mavenCentral()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation project(':core')

  if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-box2d:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-freetype:$graalHelperVersion"
  }
}

def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  ignoreExitValue = true // Дозволяє ігнорувати код виходу, якщо програма закривається коректно
  if (os.contains('mac')) {
    jvmArgs += "-XstartOnFirstThread"
  }
  // Додаємо дебаг-вивід для легшого виявлення проблем
  jvmArgs += "-Djava.library.path=libs"
}

jar {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from(sourceSets.main.resources.srcDirs) // Включаємо ресурси (assets) у JAR
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  manifest {
    attributes(
      'Main-Class': mainClassName,
      'Class-Path': '.'
    )
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Платформно-специфічні JAR
tasks.register("jarMac", Jar) {
  dependsOn("jar")
  group = "build"
  archiveFileName.set("${appName}-${projectVersion}-mac.jar")
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from(sourceSets.main.resources.srcDirs)
  exclude(
    'windows/x86/**', 'windows/x64/**', 'linux/arm32/**', 'linux/arm64/**', 'linux/x64/**',
    '**/*.dll', '**/*.so',
    'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
  )
  manifest {
    attributes(
      'Main-Class': mainClassName,
      'Class-Path': '.'
    )
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

tasks.register("jarLinux", Jar) {
  dependsOn("jar")
  group = "build"
  archiveFileName.set("${appName}-${projectVersion}-linux.jar")
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from(sourceSets.main.resources.srcDirs)
  exclude(
    'windows/x86/**', 'windows/x64/**', 'macos/arm64/**', 'macos/x64/**',
    '**/*.dll', '**/*.dylib',
    'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
  )
  manifest {
    attributes(
      'Main-Class': mainClassName,
      'Class-Path': '.'
    )
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

tasks.register("jarWin", Jar) {
  dependsOn("jar")
  group = "build"
  archiveFileName.set("${appName}-${projectVersion}-win.jar")
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from(sourceSets.main.resources.srcDirs)
  exclude(
    'macos/arm64/**', 'macos/x64/**', 'linux/arm32/**', 'linux/arm64/**', 'linux/x64/**',
    '**/*.dylib', '**/*.so',
    'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
  )
  manifest {
    attributes(
      'Main-Class': mainClassName,
      'Class-Path': '.'
    )
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

construo {
  name.set(appName)
  humanName.set(appName)
  version.set("$projectVersion")
  targets.configure {
    create("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_linux_hotspot_17.0.15_6.tar.gz")
    }
    create("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.15_6.tar.gz")
      identifier.set("com.mygdx.darkknight." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }
    create("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_mac_hotspot_17.0.15_6.tar.gz")
      identifier.set("com.mygdx.darkknight." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }
    create("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      icon.set(project.file("icons/logo.png"))
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_windows_hotspot_17.0.15_6.zip")
      // useConsole.set(true) // Розкоментуйте для дебагу
    }
  }
}

tasks.register('dist') {
  dependsOn 'jar'
}

distributions {
  main {
    contents {
      into('libs') {
        from(configurations.runtimeClasspath) {
          exclude { it.name == project.tasks.jar.outputs.files.singleFile.name }
        }
      }
    }
  }
}

startScripts.dependsOn(':lwjgl3:jar')
startScripts.classpath = project.tasks.jar.outputs.files

if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
